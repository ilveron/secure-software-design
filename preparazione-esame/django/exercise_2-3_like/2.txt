'''
Given the following Django model:

class Movie(models.Model):
    title = models.CharField(max_length=100)
    director = models.CharField(max_length=50)
    genre = models.CharField(max_length=50)
    year = models.IntegerField()
    
define a view, serializer and permission class to provide unrestricted access to users in the group
Directors, Producers, Critics, and read-only access to users in the group Actors, Fans, Students.
'''

### views.py ###
class MovieViewSet(viewsets.ModelViewSet):
    permission_classes = [IsPostEditorOrReadOnly, IsAuthenticated]
    queryset = Movie.objects.all()
    serializer_class = MovieSerializer

    
### serializers.py ###
class MovieSerializer(serializers.ModelSerializer):
    class Meta:
        fields = ('id', 'title', 'director', 'genre', 'year')
        model = Movie


### permissions.py ###
class IsPostEditorOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        if request.user.is_superuser or (request.method in permissions.SAFE_METHODS and
                                         request.user.groups.filter(name__in=["Actors", "Fans", "Students"])):
            return True
        return request.user.groups.filter(name__in=["Directors", "Producers", "Critics"])
